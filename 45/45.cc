/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle        Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
Pentagonal      Pn=n(3n−1)/2        1, 5, 12, 22, 35, ...
Hexagonal       Hn=n(2n−1)      1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/

#include <iostream>
#include <cmath>

using namespace std;

long long GetHexagonalNumber(long long n)
{
    return (2 * n - 1) * n;
}

long long GetPentagonalNumber(long long n)
{
    return (n * (3 * n - 1)) / 2;
}

long long GetTriangleNumber(long long n)
{
    return (n * (n + 1)) / 2;
}

bool IsPentagonalNumber(long long potential)
{
    // Solve the quadratic equation: 3n^2 - n - 2 * potential = 0

    long long a = 3;
    long long b = -1;
    long long c = -2 * potential;

    long long root1 = (-b + sqrt(b * b - 4 * a * c)) / (2 * a);
    long long root2 = (-b - sqrt(b * b - 4 * a * c)) / (2 * a);

    return (root1 > 0 && potential == GetPentagonalNumber(root1))
        || (root2 > 0 && potential == GetPentagonalNumber(root2));
}

bool IsTriangleNumber(long long potential)
{
    // Solve the quadratic: n^2 + n - 2 * potential = 0

    long long a = 1;
    long long b = 1;
    long long c = -2 * potential;

    long long root1 = (-b + sqrt(b * b - 4 * a * c)) / (2 * a);
    long long root2 = (-b - sqrt(b * b - 4 * a * c)) / (2 * a);

    return (root1 > 0 && potential == GetTriangleNumber(root1))
        || (root2 > 0 && potential == GetTriangleNumber(root2));
}

long long GetTripleNumber()
{
    for (long long i=1; ; ++i)
    {
        long long hexagonalNumber = GetHexagonalNumber(i);

        if (hexagonalNumber <= 40755)
        {
            continue;
        }

        if (IsPentagonalNumber(hexagonalNumber) && IsTriangleNumber(hexagonalNumber))
        {
            return hexagonalNumber;
        }
    }
}

int main()
{
    cout << GetTripleNumber() << endl;

    return 0;
}

